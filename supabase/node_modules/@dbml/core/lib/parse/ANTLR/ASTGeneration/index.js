"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
var _antlr = _interopRequireDefault(require("antlr4"));
var _PostgreSQLLexer = _interopRequireDefault(require("../parsers/postgresql/PostgreSQLLexer"));
var _PostgreSQLParser = _interopRequireDefault(require("../parsers/postgresql/PostgreSQLParser"));
var _PostgresASTGen = _interopRequireDefault(require("./postgres/PostgresASTGen"));
var _ParserErrorListener = _interopRequireDefault(require("./ParserErrorListener"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/* eslint-disable import/no-named-as-default-member */
/* eslint-disable import/no-named-as-default */

function parse(input, format) {
  var chars = new _antlr["default"].InputStream(input);
  var database = null;
  if (format === 'postgres') {
    var lexer = new _PostgreSQLLexer["default"](chars);
    var tokens = new _antlr["default"].CommonTokenStream(lexer);
    var parser = new _PostgreSQLParser["default"](tokens);
    parser.buildParseTrees = true;
    parser.removeErrorListeners();
    parser.addErrorListener(new _ParserErrorListener["default"]());
    var parseTree = parser.root();
    database = parseTree.accept(new _PostgresASTGen["default"]());
  } else {
    throw new Error("Format not supported: ".concat(format));
  }
  return database;
}