"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _table = _interopRequireDefault(require("./table"));
var _element = _interopRequireDefault(require("./element"));
var _enum2 = _interopRequireDefault(require("./enum"));
var _utils = require("./utils");
var _tableGroup = _interopRequireDefault(require("./tableGroup"));
var _ref2 = _interopRequireDefault(require("./ref"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Schema = /*#__PURE__*/function (_Element) {
  _inherits(Schema, _Element);
  var _super = _createSuper(Schema);
  function Schema() {
    var _this;
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      name = _ref.name,
      alias = _ref.alias,
      note = _ref.note,
      _ref$tables = _ref.tables,
      tables = _ref$tables === void 0 ? [] : _ref$tables,
      _ref$refs = _ref.refs,
      refs = _ref$refs === void 0 ? [] : _ref$refs,
      _ref$enums = _ref.enums,
      enums = _ref$enums === void 0 ? [] : _ref$enums,
      _ref$tableGroups = _ref.tableGroups,
      tableGroups = _ref$tableGroups === void 0 ? [] : _ref$tableGroups,
      token = _ref.token,
      _ref$database = _ref.database,
      database = _ref$database === void 0 ? {} : _ref$database;
    _classCallCheck(this, Schema);
    _this = _super.call(this, token);
    _this.tables = [];
    _this.enums = [];
    _this.tableGroups = [];
    _this.refs = [];
    _this.name = name;
    _this.note = note ? note.value : null;
    _this.noteToken = note ? note.token : null;
    _this.alias = alias;
    _this.database = database;
    _this.dbState = _this.database.dbState;
    _this.generateId();
    _this.processEnums(enums);
    _this.processTables(tables);
    _this.processRefs(refs);
    _this.processTableGroups(tableGroups);
    return _this;
  }
  _createClass(Schema, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('schemaId');
    }
  }, {
    key: "processTables",
    value: function processTables(rawTables) {
      var _this2 = this;
      rawTables.forEach(function (table) {
        _this2.pushTable(new _table["default"](_objectSpread(_objectSpread({}, table), {}, {
          schema: _this2
        })));
      });
    }
  }, {
    key: "pushTable",
    value: function pushTable(table) {
      this.checkTable(table);
      this.tables.push(table);
    }
  }, {
    key: "checkTable",
    value: function checkTable(table) {
      if (this.tables.some(function (t) {
        return t.name === table.name;
      })) {
        table.error("Table ".concat((0, _utils.shouldPrintSchema)(this) ? "\"".concat(this.name, "\".") : '', "\"").concat(table.name, "\" existed"));
      }
    }
  }, {
    key: "findTable",
    value: function findTable(tableName) {
      return this.tables.find(function (t) {
        return t.name === tableName;
      });
    }
  }, {
    key: "processEnums",
    value: function processEnums(rawEnums) {
      var _this3 = this;
      rawEnums.forEach(function (_enum) {
        _this3.pushEnum(new _enum2["default"](_objectSpread(_objectSpread({}, _enum), {}, {
          schema: _this3
        })));
      });
    }
  }, {
    key: "pushEnum",
    value: function pushEnum(_enum) {
      this.checkEnum(_enum);
      this.enums.push(_enum);
    }
  }, {
    key: "checkEnum",
    value: function checkEnum(_enum) {
      if (this.enums.some(function (e) {
        return e.name === _enum.name;
      })) {
        _enum.error("Enum ".concat((0, _utils.shouldPrintSchema)(this) ? "\"".concat(this.name, "\".") : '', "\"").concat(_enum.name, "\" existed"));
      }
    }
  }, {
    key: "processRefs",
    value: function processRefs(rawRefs) {
      var _this4 = this;
      rawRefs.forEach(function (ref) {
        _this4.pushRef(new _ref2["default"](_objectSpread(_objectSpread({}, ref), {}, {
          schema: _this4
        })));
      });
    }
  }, {
    key: "pushRef",
    value: function pushRef(ref) {
      this.checkRef(ref);
      this.refs.push(ref);
    }
  }, {
    key: "checkRef",
    value: function checkRef(ref) {
      if (this.refs.some(function (r) {
        return r.equals(ref);
      })) {
        var endpoint1 = ref.endpoints[0];
        var fieldList1 = endpoint1.fieldNames.map(JSON.stringify).join(', ');
        var endpoint2 = ref.endpoints[1];
        var fieldList2 = endpoint2.fieldNames.map(JSON.stringify).join(', ');
        var ref1 = "\"".concat(endpoint1.schemaName ? "".concat(endpoint1.schemaName, "\".\"") : '').concat(endpoint1.tableName, "\"(").concat(fieldList1, ")");
        var ref2 = "\"".concat(endpoint2.schemaName ? "".concat(endpoint2.schemaName, "\".\"") : '').concat(endpoint2.tableName, "\"(").concat(fieldList2, ")");
        ref.error("Reference with the same endpoints already exists: ".concat(ref1, " references ").concat(ref2));
      }
    }
  }, {
    key: "processTableGroups",
    value: function processTableGroups(rawTableGroups) {
      var _this5 = this;
      rawTableGroups.forEach(function (tableGroup) {
        _this5.pushTableGroup(new _tableGroup["default"](_objectSpread(_objectSpread({}, tableGroup), {}, {
          schema: _this5
        })));
      });
    }
  }, {
    key: "pushTableGroup",
    value: function pushTableGroup(tableGroup) {
      this.checkTableGroup(tableGroup);
      this.tableGroups.push(tableGroup);
    }
  }, {
    key: "checkTableGroup",
    value: function checkTableGroup(tableGroup) {
      if (this.tableGroups.some(function (tg) {
        return tg.name === tableGroup.name;
      })) {
        tableGroup.error("Table Group ".concat((0, _utils.shouldPrintSchema)(this) ? "\"".concat(this.name, "\".") : '', "\"").concat(tableGroup.name, "\" existed"));
      }
    }
  }, {
    key: "checkSameId",
    value: function checkSameId(schema) {
      return this.name === schema.name || this.alias === schema.name || this.name === schema.alias || this.alias && this.alias === schema.alias;
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread(_objectSpread({}, this.shallowExport()), this.exportChild());
    }
  }, {
    key: "exportChild",
    value: function exportChild() {
      return {
        tables: this.tables.map(function (t) {
          return t["export"]();
        }),
        enums: this.enums.map(function (e) {
          return e["export"]();
        }),
        tableGroups: this.tableGroups.map(function (tg) {
          return tg["export"]();
        }),
        refs: this.refs.map(function (r) {
          return r["export"]();
        })
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        tableIds: this.tables.map(function (t) {
          return t.id;
        }),
        enumIds: this.enums.map(function (e) {
          return e.id;
        }),
        tableGroupIds: this.tableGroups.map(function (tg) {
          return tg.id;
        }),
        refIds: this.refs.map(function (r) {
          return r.id;
        })
      };
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        databaseId: this.database.id
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name,
        note: this.note,
        alias: this.alias
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.schemas = _objectSpread(_objectSpread({}, model.schemas), {}, _defineProperty({}, this.id, _objectSpread(_objectSpread(_objectSpread({
        id: this.id
      }, this.shallowExport()), this.exportChildIds()), this.exportParentIds())));
      this.tables.forEach(function (table) {
        return table.normalize(model);
      });
      this.enums.forEach(function (_enum) {
        return _enum.normalize(model);
      });
      this.tableGroups.forEach(function (tableGroup) {
        return tableGroup.normalize(model);
      });
      this.refs.forEach(function (ref) {
        return ref.normalize(model);
      });
    }
  }]);
  return Schema;
}(_element["default"]);
var _default = Schema;
exports["default"] = _default;