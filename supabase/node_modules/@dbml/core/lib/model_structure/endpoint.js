"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _element = _interopRequireDefault(require("./element"));
var _config = require("./config");
var _utils = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Endpoint = /*#__PURE__*/function (_Element) {
  _inherits(Endpoint, _Element);
  var _super = _createSuper(Endpoint);
  function Endpoint(_ref) {
    var _this;
    var tableName = _ref.tableName,
      schemaName = _ref.schemaName,
      fieldNames = _ref.fieldNames,
      relation = _ref.relation,
      token = _ref.token,
      ref = _ref.ref;
    _classCallCheck(this, Endpoint);
    _this = _super.call(this, token);
    _this.relation = relation;
    _this.schemaName = schemaName;
    _this.tableName = tableName;
    _this.fieldNames = fieldNames;
    _this.fields = [];
    _this.ref = ref;
    _this.dbState = _this.ref.dbState;
    _this.generateId();
    // Use name of schema,table and field object
    // Name in constructor could be alias
    var schema = ref.schema.database.findOrCreateSchema(schemaName || _config.DEFAULT_SCHEMA_NAME);
    var table = schema.database.findTable(schemaName, tableName);
    if (!table) {
      _this.error("Can't find table ".concat((0, _utils.shouldPrintSchemaName)(schemaName) ? "\"".concat(schemaName, "\".") : '', "\"").concat(tableName, "\""));
    }
    _this.setFields(fieldNames, table);
    return _this;
  }
  _createClass(Endpoint, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('endpointId');
    }
  }, {
    key: "equals",
    value: function equals(endpoint) {
      if (this.fields.length !== endpoint.fields.length) return false;
      return this.compareFields(endpoint);
    }
  }, {
    key: "compareFields",
    value: function compareFields(endpoint) {
      var sortedThisFieldIds = this.fields.map(function (field) {
        return field.id;
      }).sort();
      var sortedEndpointFieldIds = endpoint.fields.map(function (field) {
        return field.id;
      }).sort();
      for (var i = 0; i < sortedThisFieldIds.length; i += 1) {
        if (sortedThisFieldIds[i] !== sortedEndpointFieldIds[i]) return false;
      }
      return true;
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport());
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        refId: this.ref.id,
        fieldIds: this.fields.map(function (field) {
          return field.id;
        })
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        schemaName: this.schemaName,
        tableName: this.tableName,
        fieldNames: this.fieldNames,
        relation: this.relation
      };
    }
  }, {
    key: "setFields",
    value: function setFields(fieldNames, table) {
      var _this2 = this;
      var newFieldNames = fieldNames && fieldNames.length ? _toConsumableArray(fieldNames) : [];
      if (!newFieldNames.length) {
        var fieldHasPK = table.fields.find(function (field) {
          return field.pk;
        });
        if (fieldHasPK) {
          newFieldNames.push(fieldHasPK.name);
        } else {
          var indexHasPK = table.indexes.find(function (index) {
            return index.pk;
          });
          if (indexHasPK) {
            newFieldNames = indexHasPK.columns.map(function (column) {
              return column.value;
            });
          } else {
            this.error("Can't find primary or composite key in table ".concat((0, _utils.shouldPrintSchema)(table.schema) ? "\"".concat(table.schema.name, "\".") : '', "\"").concat(table.name, "\""));
          }
        }
      }
      newFieldNames.forEach(function (fieldName) {
        var field = table.findField(fieldName);
        if (!field) {
          _this2.error("Can't find field ".concat((0, _utils.shouldPrintSchema)(table.schema) ? "\"".concat(table.schema.name, "\".") : '', "\"").concat(fieldName, "\" in table \"").concat(table.name, "\""));
        }
        _this2.fields.push(field);
        field.pushEndpoint(_this2);
      });
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.endpoints = _objectSpread(_objectSpread({}, model.endpoints), {}, _defineProperty({}, this.id, _objectSpread(_objectSpread({
        id: this.id
      }, this.shallowExport()), this.exportParentIds())));
    }
  }]);
  return Endpoint;
}(_element["default"]);
var _default = Endpoint;
exports["default"] = _default;