"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _element = _interopRequireDefault(require("./element"));
var _config = require("./config");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Field = /*#__PURE__*/function (_Element) {
  _inherits(Field, _Element);
  var _super = _createSuper(Field);
  function Field() {
    var _this;
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      name = _ref.name,
      type = _ref.type,
      unique = _ref.unique,
      pk = _ref.pk,
      token = _ref.token,
      notNull = _ref.not_null,
      note = _ref.note,
      dbdefault = _ref.dbdefault,
      increment = _ref.increment,
      _ref$table = _ref.table,
      table = _ref$table === void 0 ? {} : _ref$table;
    _classCallCheck(this, Field);
    _this = _super.call(this, token);
    if (!name) {
      _this.error('Field must have a name');
    }
    if (!type) {
      _this.error('Field must have a type');
    }
    _this.name = name;
    // type : { type_name, value, schemaName }
    _this.type = type;
    _this.unique = unique;
    _this.pk = pk;
    _this.not_null = notNull;
    _this.note = note ? note.value : null;
    _this.noteToken = note ? note.token : null;
    _this.dbdefault = dbdefault;
    _this.increment = increment;
    _this.endpoints = [];
    _this.table = table;
    _this.dbState = _this.table.dbState;
    _this.generateId();
    _this.bindType();
    return _this;
  }
  _createClass(Field, [{
    key: "generateId",
    value: function generateId() {
      this.id = this.dbState.generateId('fieldId');
    }
  }, {
    key: "bindType",
    value: function bindType() {
      var typeName = this.type.type_name;
      var typeSchemaName = this.type.schemaName || _config.DEFAULT_SCHEMA_NAME;
      if (this.type.schemaName) {
        var _enum = this.table.schema.database.findEnum(typeSchemaName, typeName);
        if (!_enum) {
          // SQL allow definition of non-enum type to be used as column type, which we don't have equivalent dbml counterpart.
          // So instead of throwing errors on those type, we can view the type as plain text for the purpose of importing to dbml.
          this.type.type_name = "".concat(typeSchemaName, ".").concat(typeName);
          return;
        }
        this._enum = _enum;
        _enum.pushField(this);
      } else {
        var _enum2 = this.table.schema.database.findEnum(typeSchemaName, typeName);
        if (!_enum2) return;
        this._enum = _enum2;
        _enum2.pushField(this);
      }
    }
  }, {
    key: "pushEndpoint",
    value: function pushEndpoint(endpoint) {
      this.endpoints.push(endpoint);
    }
  }, {
    key: "export",
    value: function _export() {
      return _objectSpread({}, this.shallowExport());
    }
  }, {
    key: "exportParentIds",
    value: function exportParentIds() {
      return {
        tableId: this.table.id,
        enumId: this._enum ? this._enum.id : null
      };
    }
  }, {
    key: "exportChildIds",
    value: function exportChildIds() {
      return {
        endpointIds: this.endpoints.map(function (e) {
          return e.id;
        })
      };
    }
  }, {
    key: "shallowExport",
    value: function shallowExport() {
      return {
        name: this.name,
        type: this.type,
        unique: this.unique,
        pk: this.pk,
        not_null: this.not_null,
        note: this.note,
        dbdefault: this.dbdefault,
        increment: this.increment
      };
    }
  }, {
    key: "normalize",
    value: function normalize(model) {
      model.fields = _objectSpread(_objectSpread({}, model.fields), {}, _defineProperty({}, this.id, _objectSpread(_objectSpread(_objectSpread({
        id: this.id
      }, this.shallowExport()), this.exportChildIds()), this.exportParentIds())));
    }
  }]);
  return Field;
}(_element["default"]);
var _default = Field;
exports["default"] = _default;