"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _ = require('lodash');
var _require = require('../../../utils'),
  getFullTableName = _require.getFullTableName;
function createRefFromInlineRef(linesRefs, inlineRefs, fieldName, tableName) {
  if (!inlineRefs || inlineRefs.length === 0) return;
  var newRef = {};
  var inlineRef = inlineRefs[0];
  newRef.onUpdate = inlineRef.onUpdate;
  newRef.onDelete = inlineRef.onDelete;
  newRef.endpoints = [];
  newRef.endpoints.push({
    tableName: tableName.name,
    schemaName: tableName.schemaName,
    fieldNames: [fieldName],
    relation: '*'
  });
  if (!inlineRef.endpoint.fieldNames) {
    inlineRef.endpoint.fieldNames = newRef.endpoints[0].fieldNames;
  }
  newRef.endpoints.push(inlineRef.endpoint);
  linesRefs.push(newRef);
}
function pushOutEnum(linesEnums, fieldValue, tableName) {
  if (fieldValue.enums) {
    var _enum = fieldValue.enums;
    var fieldType = fieldValue.type;
    _enum.name = "".concat(tableName.schemaName ? "".concat(tableName.schemaName, "_") : '').concat(tableName.name, "_").concat(fieldValue.enums.name);
    fieldType.type_name = _enum.name;
    fieldType.args = _enum.values.map(function (value) {
      return "'".concat(value.name, "'");
    }).join(', ');
    linesEnums.push(_enum);
    fieldValue.enums = null;
  }
}
function pushOutIndex(linesIndexes, fieldValue) {
  if (fieldValue.indexes) {
    fieldValue.indexes.columns.push({
      value: fieldValue.name,
      type: 'column'
    });
    linesIndexes.push(fieldValue.indexes);
    fieldValue.indexes = null;
  }
}
function getLinesValue(lines, tableName) {
  var value = {
    fields: [],
    enums: [],
    refs: [],
    indexes: []
  };
  lines.forEach(function (line) {
    if (line && value[line.type]) {
      if (line.type === 'fields') {
        pushOutEnum(value.enums, line.value, tableName);
        pushOutIndex(value.indexes, line.value);
        createRefFromInlineRef(value.refs, line.value.inline_refs, line.value.name, tableName);
      }
      if (line.type === 'refs') {
        var ref = line.value;
        ref.endpoints[0].tableName = tableName.name;
        ref.endpoints[0].schemaName = tableName.schemaName;
      }
      value[line.type].push(line.value);
    }
  });
  return {
    type: 'lines',
    value: value
  };
}
function makeTable(_keyword, tableName, _keyword2, lines) {
  var fullName = getFullTableName(tableName);
  var linesValue = getLinesValue(lines, fullName);
  return {
    type: 'tables',
    value: _objectSpread(_objectSpread({}, fullName), linesValue.value)
  };
}
module.exports = {
  makeTable: makeTable
};